const os = require('os');
const path = require('path');
const { existsSync } = require('fs');

function getPlatformPackageName() {
  const platform = os.platform();
  const arch = os.arch();
  
  // Map Node.js values to our package names
  let platformName, archName;
  
  if (platform === 'win32') platformName = 'win32';
  else if (platform === 'darwin') platformName = 'darwin';  
  else if (platform === 'linux') platformName = 'linux';
  else throw new Error(`Unsupported platform: ${platform}`);
  
  if (arch === 'x64') archName = 'x64';
  else if (arch === 'arm64') archName = 'arm64';
  else throw new Error(`Unsupported architecture: ${arch}. Supported architectures: x64, arm64. Please install from source: cargo install --git https://github.com/pulseengine/studio-mcp.git studio-mcp-server`);
  
  return `@pulseengine/studio-mcp-server-${platformName}-${archName}`;
}

function getBinaryPath() {
  const packageName = getPlatformPackageName();
  
  try {
    // Try to require the platform-specific package
    const platformPackage = require(packageName);
    
    // Verify the binary exists
    if (!existsSync(platformPackage.binaryPath)) {
      throw new Error(`Binary not found at ${platformPackage.binaryPath}`);
    }
    
    return platformPackage.binaryPath;
  } catch (error) {
    if (error.code === 'MODULE_NOT_FOUND') {
      throw new Error(`Platform package ${packageName} not found. This usually means the installation failed or your platform is not supported.`);
    }
    throw error;
  }
}

function downloadFallback() {
  // Fallback to downloading from GitHub releases if platform package not available
  const version = require('./package.json').version;
  const platform = os.platform();
  const arch = os.arch();
  
  let targetPlatform, targetArch;
  
  if (platform === 'win32') targetPlatform = 'pc-windows-msvc';
  else if (platform === 'darwin') targetPlatform = 'apple-darwin';
  else if (platform === 'linux') targetPlatform = 'unknown-linux-gnu';
  else throw new Error(`Unsupported platform: ${platform}`);
  
  if (arch === 'x64') targetArch = 'x86_64';
  else if (arch === 'arm64') targetArch = 'aarch64';
  else throw new Error(`Unsupported architecture: ${arch}`);
  
  const binaryName = platform === 'win32' ? 'studio-mcp-server.exe' : 'studio-mcp-server';
  const archiveExtension = platform === 'win32' ? 'zip' : 'tar.gz';
  const downloadUrl = `https://github.com/pulseengine/studio-mcp/releases/download/v${version}/studio-mcp-server-v${version}-${targetArch}-${targetPlatform}.${archiveExtension}`;
  
  return { downloadUrl, binaryName, targetPlatform: `${targetArch}-${targetPlatform}` };
}

function getBinaryPathWithFallback() {
  try {
    // Try the platform package approach first
    return getBinaryPath();
  } catch (error) {
    // Check if fallback binary exists in our bin directory
    const platform = os.platform();
    const binaryName = platform === 'win32' ? 'studio-mcp-server.exe' : 'studio-mcp-server';
    const fallbackBinaryPath = path.join(__dirname, 'bin', binaryName);
    
    if (existsSync(fallbackBinaryPath)) {
      return fallbackBinaryPath;
    }
    
    // If platform package not available, provide helpful error with fallback info
    const fallback = downloadFallback();
    throw new Error(`${error.message}\n\nðŸ”§ Fallback options:\n1. Install from source: cargo install --git https://github.com/pulseengine/studio-mcp.git studio-mcp-server\n2. Download binary manually from: ${fallback.downloadUrl}`);
  }
}

exports.getBinaryPath = getBinaryPathWithFallback;